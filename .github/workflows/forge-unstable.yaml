# Continuously run unstable forge tests against the latest main branch, to promote to stable.
name: Continuous Forge Tests - Unstable

permissions:
  issues: write
  pull-requests: write
  contents: read
  id-token: write
  actions: write #required for workflow cancellation via check-aptos-core

on:
  # Allow triggering manually
  workflow_dispatch:
    inputs:
      IMAGE_TAG:
        required: false
        type: string
        description: The docker image tag to test. This may be a git SHA1, or a tag like "<branch>_<git SHA1>". If not specified, Forge will find the latest build based on the git history (starting from GIT_SHA input)
      GIT_SHA:
        required: false
        type: string
        description: The git SHA1 to checkout. This affects the Forge test runner that is used. If not specified, the latest main will be used
  pull_request:
    paths:
      - ".github/workflows/forge-unstable.yaml"

env:
  AWS_ACCOUNT_NUM: ${{ secrets.ENV_ECR_AWS_ACCOUNT_NUM }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-west-2
  IMAGE_TAG: ${{ inputs.IMAGE_TAG }} # this is only used for workflow_dispatch, otherwise defaults to empty

jobs:
  # This job determines the image tag and branch to test, and passes them to the other jobs
  # NOTE: this may be better as a separate workflow as the logic is quite complex but generalizable
  determine-test-metadata:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.get-docker-image-tag.outputs.IMAGE_TAG }}
      BRANCH: ${{ steps.determine-test-branch.outputs.BRANCH }}
    steps:
      - uses: actions/checkout@v4

      - name: Determine branch based on cadence
        id: determine-test-branch
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "Unknown schedule: ${{ github.event.schedule }}"
            exit 1
          else
            echo "Using GIT_SHA"
            # on workflow_dispatch, this will simply use the inputs.GIT_SHA given (or the default)
            # on pull_request, this will default to null and the following "checkout" step will use the PR's base branch
            echo "BRANCH=${{ inputs.GIT_SHA }}" >> $GITHUB_OUTPUT
          fi

      - uses: aptos-labs/aptos-core/.github/actions/check-aptos-core@main
        with:
          cancel-workflow: ${{ github.event_name == 'schedule' }} # Cancel the workflow if it is scheduled on a fork

      # actions/get-latest-docker-image-tag requires docker utilities and having authenticated to internal docker image registries
      - uses: aptos-labs/aptos-core/.github/actions/docker-setup@main
        id: docker-setup
        with:
          GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          EXPORT_GCP_PROJECT_VARIABLES: "false"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DOCKER_ARTIFACT_REPO: ${{ secrets.AWS_DOCKER_ARTIFACT_REPO }}
          GIT_CREDENTIALS: ${{ secrets.GIT_CREDENTIALS }}

      - uses: aptos-labs/aptos-core/.github/actions/get-latest-docker-image-tag@main
        id: get-docker-image-tag
        with:
          branch: ${{ steps.determine-test-branch.outputs.BRANCH }}
          variants: "failpoints performance"

      - name: Write summary
        run: |
          IMAGE_TAG=${{ steps.get-docker-image-tag.outputs.IMAGE_TAG }}
          BRANCH=${{ steps.determine-test-branch.outputs.BRANCH }}
          if [ -n "${BRANCH}" ]; then
            echo "BRANCH: [${BRANCH}](https://github.com/${{ github.repository }}/tree/${BRANCH})" >> $GITHUB_STEP_SUMMARY
          fi
          echo "IMAGE_TAG: [${IMAGE_TAG}](https://github.com/${{ github.repository }}/commit/${IMAGE_TAG})" >> $GITHUB_STEP_SUMMARY

  forge-continuous:
    if: ${{ github.event_name != 'pull_request' }}
    needs: determine-test-metadata
    uses: aptos-labs/aptos-core/.github/workflows/workflow-run-forge.yaml@main
    secrets: inherit
    with:
      IMAGE_TAG: ${{ needs.determine-test-metadata.outputs.IMAGE_TAG }}
      # GCP cluster
      FORGE_CLUSTER_NAME: aptos-forge-1
      COMMENT_HEADER: forge-continuous
      # This test suite is configured using the forge.py config test command
      FORGE_TEST_SUITE: continuous

  run-forge-state-sync-slow-processing-catching-up-test:
    if: ${{ github.event_name != 'pull_request' && always() }}
    needs: [ determine-test-metadata, forge-continuous ] # Only run after the previous job completes
    uses: aptos-labs/aptos-core/.github/workflows/workflow-run-forge.yaml@main
    secrets: inherit
    with:
      IMAGE_TAG: ${{ needs.determine-test-metadata.outputs.IMAGE_TAG }}
      # GCP cluster
      FORGE_CLUSTER_NAME: aptos-forge-1
      FORGE_NAMESPACE: forge-state-sync-slow-processing-catching-up-test-${{ needs.determine-test-metadata.outputs.IMAGE_TAG }}
      FORGE_RUNNER_DURATION_SECS: 900 # Run for 15 minutes
      FORGE_TEST_SUITE: state_sync_slow_processing_catching_up
      POST_TO_SLACK: true
      FORGE_ENABLE_FAILPOINTS: true

  run-forge-twin-validator-test:
    if: ${{ github.event_name != 'pull_request' && always() }}
    needs: [ determine-test-metadata, run-forge-state-sync-slow-processing-catching-up-test ] # Only run after the previous job completes
    uses: aptos-labs/aptos-core/.github/workflows/workflow-run-forge.yaml@main
    secrets: inherit
    with:
      IMAGE_TAG: ${{ needs.determine-test-metadata.outputs.IMAGE_TAG }}
      # GCP cluster
      FORGE_CLUSTER_NAME: aptos-forge-1
      FORGE_NAMESPACE: forge-twin-validator-${{ needs.determine-test-metadata.outputs.IMAGE_TAG }}
      FORGE_RUNNER_DURATION_SECS: 900 # Run for 15 minutes
      FORGE_TEST_SUITE: twin_validator_test
      POST_TO_SLACK: true

  run-forge-state-sync-failures-catching-up-test:
    if: ${{ github.event_name != 'pull_request' && always() }}
    needs: [ determine-test-metadata, run-forge-twin-validator-test ] # Only run after the previous job completes
    uses: aptos-labs/aptos-core/.github/workflows/workflow-run-forge.yaml@main
    secrets: inherit
    with:
      IMAGE_TAG: ${{ needs.determine-test-metadata.outputs.IMAGE_TAG }}
      FORGE_NAMESPACE: forge-state-sync-failures-catching-up-test-${{ needs.determine-test-metadata.outputs.IMAGE_TAG }}
      # GCP cluster
      FORGE_CLUSTER_NAME: aptos-forge-1
      FORGE_RUNNER_DURATION_SECS: 900 # Run for 15 minutes
      FORGE_TEST_SUITE: state_sync_failures_catching_up
      FORGE_ENABLE_FAILPOINTS: true
      POST_TO_SLACK: ${{ needs.determine-test-metadata.outputs.BRANCH == 'main' }} # only post to slack on main branch

  run-forge-validator-reboot-stress-test:
    if: ${{ github.event_name != 'pull_request' && always() }}
    needs: [ determine-test-metadata, run-forge-state-sync-failures-catching-up-test ] # Only run after the previous job completes
    uses: aptos-labs/aptos-core/.github/workflows/workflow-run-forge.yaml@main
    secrets: inherit
    with:
      IMAGE_TAG: ${{ needs.determine-test-metadata.outputs.IMAGE_TAG }}
      # GCP cluster
      FORGE_CLUSTER_NAME: aptos-forge-1
      FORGE_NAMESPACE: forge-validator-reboot-stress-${{ needs.determine-test-metadata.outputs.IMAGE_TAG }}
      FORGE_RUNNER_DURATION_SECS: 2400 # Run for 40 minutes
      FORGE_TEST_SUITE: validator_reboot_stress_test
      POST_TO_SLACK: true

  run-forge-haproxy:
    if: ${{ github.event_name != 'pull_request' && always() }}
    needs: [ determine-test-metadata, run-forge-validator-reboot-stress-test ] # Only run after the previous job completes
    uses: aptos-labs/aptos-core/.github/workflows/workflow-run-forge.yaml@main
    secrets: inherit
    with:
      IMAGE_TAG: ${{ needs.determine-test-metadata.outputs.IMAGE_TAG }}
      # GCP cluster
      FORGE_CLUSTER_NAME: aptos-forge-1
      FORGE_NAMESPACE: forge-haproxy-${{ needs.determine-test-metadata.outputs.BRANCH_HASH }}
      FORGE_RUNNER_DURATION_SECS: 600 # Run for 10 minutes
      FORGE_ENABLE_HAPROXY: true
      FORGE_TEST_SUITE: realistic_env_max_load
      POST_TO_SLACK: true
